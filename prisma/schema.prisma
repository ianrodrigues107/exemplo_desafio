datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  cpf       String    @unique
  password  String
  avatar    String?
  xp        Int       @default(0)
  level     Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  activities     Activity[]            @relation("Creator")
  participations ActivityParticipant[]
  preferences    Preference[]
  achievements UserAchievement[]
}

model Activity {
  id               String                @id @default(uuid())
  title            String
  description      String
  type             ActivityType          @relation(fields: [typeId], references: [id])
  typeId           String
  image            String?
  confirmationCode String
  scheduledDate    DateTime
  createdAt        DateTime              @default(now())
  completedAt      DateTime?
  private          Boolean               @default(false)
  creator          User                  @relation("Creator", fields: [creatorId], references: [id])
  creatorId        String
  participants     ActivityParticipant[]
  address          ActivityAddress?
}

model ActivityParticipant {
  id          String    @id @default(uuid())
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  approved    Boolean   @default(false) 
  confirmedAt DateTime?
}

model ActivityType {
  id          String       @id @default(uuid())
  name        String
  description String?
  image       String?
  activities  Activity[]
  preferences Preference[]
}

model Preference {
  id     String       @id @default(uuid())
  user   User         @relation(fields: [userId], references: [id])
  userId String
  type   ActivityType @relation(fields: [typeId], references: [id])
  typeId String
}

model ActivityAddress {
  id         String   @id @default(uuid())
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @unique
  latitude   Float
  longitude  Float
}
model Achievement {
  id          String     @id @default(uuid())
  name        String     
  description String?
  criterion   String     
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())
}
